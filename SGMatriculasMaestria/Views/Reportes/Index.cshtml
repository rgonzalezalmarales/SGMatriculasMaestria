@model IEnumerable<SGMatriculasMaestria.Models.Aspirante>

@{
    ViewData["Title"] = "Aspirantes";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<label>Mujeres <span>(@ViewBag.Mujeres)</span></label><br/>
<label>Hombre <span>(@ViewBag.Hombres)</span></label>

<canvas id="myChart" width="400" height="400"></canvas>

@section scripts
{
    <script src="~/lib/chart.js-3.6.0/package/dist/chart.js"></script>
    
    <script>
        /*const ctx = document.getElementById('myChart').getContext('2d');
        const myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
                datasets: [{
                    label: '# of Votes',
                    data: [12, 19, 3, 5, 2, 3],
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });*/
    </script>
    
    <script>
        const config = {
            type: 'bar',
            data: data,
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Chart.js Bar Chart'
                    }
                }
            },
        };


        const DATA_COUNT = 7;
        const NUMBER_CFG = { count: DATA_COUNT, min: -100, max: 100 };

        const labels = Utils.months({ count: 7 });
        const data = {
            labels: labels,
            datasets: [
                {
                    label: 'Mujeres',
                    data: Utils.numbers(NUMBER_CFG),
                    borderColor: Utils.CHART_COLORS.red,
                    backgroundColor: Utils.transparentize(Utils.CHART_COLORS.red, 0.5),
                },
                {
                    label: 'Hombres',
                    data: Utils.numbers(NUMBER_CFG),
                    borderColor: Utils.CHART_COLORS.blue,
                    backgroundColor: Utils.transparentize(Utils.CHART_COLORS.blue, 0.5),
                }
            ]
        };

        const actions = [
            {
                name: 'Randomize',
                handler(chart) {
                    chart.data.datasets.forEach(dataset => {
                        dataset.data = Utils.numbers({ count: chart.data.labels.length, min: -100, max: 100 });
                    });
                    chart.update();
                }
            },
            {
                name: 'Add Dataset',
                handler(chart) {
                    const data = chart.data;
                    const dsColor = Utils.namedColor(chart.data.datasets.length);
                    const newDataset = {
                        label: 'Dataset ' + (data.datasets.length + 1),
                        backgroundColor: Utils.transparentize(dsColor, 0.5),
                        borderColor: dsColor,
                        borderWidth: 1,
                        data: Utils.numbers({ count: data.labels.length, min: -100, max: 100 }),
                    };
                    chart.data.datasets.push(newDataset);
                    chart.update();
                }
            },
            {
                name: 'Add Data',
                handler(chart) {
                    const data = chart.data;
                    if (data.datasets.length > 0) {
                        data.labels = Utils.months({ count: data.labels.length + 1 });

                        for (let index = 0; index < data.datasets.length; ++index) {
                            data.datasets[index].data.push(Utils.rand(-100, 100));
                        }

                        chart.update();
                    }
                }
            },
            {
                name: 'Remove Dataset',
                handler(chart) {
                    chart.data.datasets.pop();
                    chart.update();
                }
            },
            {
                name: 'Remove Data',
                handler(chart) {
                    chart.data.labels.splice(-1, 1); // remove the label first

                    chart.data.datasets.forEach(dataset => {
                        dataset.data.pop();
                    });

                    chart.update();
                }
            }
        ];

        $(document).ready(function () {
            const ctx = document.getElementById('myChart').getContext('2d');
            const myChart = new Chart(ctx, config
        });
        

    </script>



}